*$FROM LibraryEx
$EXTERN LoadFile, Inc, OneOf, Map;
*$EXTERN Success, Fails

*$FROM Library
*$EXTERN True, False

*$FROM R5FW-Parser-Defs
$EXTERN Builtins, TokName;
*$EXTERN TkEOF, TkSpecComment, TkOpenCall, TkError
*$EXTERN TkOpenBracket, TkCloseBracket, TkOpenBlock, TkCloseBlock, TkCloseCall
*$EXTERN TkComma, TkColon, TkAssign, TkSemicolon, TkExtern, TkEntry
*$EXTERN TkMacroDigit, TkVariable, TkName, TkChar, TkCompound
*$EXTERN SpecialComment, Extern, Function, Entry, Local
*$EXTERN RETURN, CALL-BLOCK, Condition
*$EXTERN Symbol, Word, Number, Char, Variable, Brackets, Call


/**
  <Scan e.SourceFile> == t.Token*
  t.Pos ::= (s.Line s.Col e.FileName)
*/
$ENTRY Scan {
  e.FileName =
    <DoScan (1 1 e.FileName) <SkipBOM <LoadFile e.FileName>>>;
}

/**
  <ScanString-FromPos t.InitPos e.String> == e.Tokens
*/
$ENTRY ScanString-FromPos {
  t.Pos e.String = <DoScan t.Pos (e.String)>;
}

SkipBOM {
  ('\xEF\xBB\xBF' e.FirstLine) e.Lines = (e.FirstLine) e.Lines;

  e.Lines = e.Lines;
}

IncLine {
  (s.Line s.Col e.FileName) = (<Inc s.Line> 1 e.FileName);
}

*$ENUM Len

IncCol {
  (s.Line s.Col e.FileName) = (s.Line <Inc s.Col> e.FileName);

  t.Pos Len = t.Pos;
  t.Pos Len s.First e.String = <IncCol <IncCol t.Pos> Len e.String>;

  (s.Line s.Col e.FileName) '+' s.Number =
    (s.Line <+ s.Col s.Number> e.FileName);
}

DoScan {
  t.Pos = (TkEOF t.Pos);

  t.Pos () e.Lines =
    <DoScan <IncLine t.Pos> e.Lines>;

  t.Pos (' ' e.Line) e.Lines =
    <DoScan <IncCol t.Pos> (e.Line) e.Lines>;

  t.Pos ('\t' e.Line) e.Lines =
    <DoScan <IncCol t.Pos> (e.Line) e.Lines>;

  t.Pos ('$' e.Line) e.Lines =
    <DoScan-Keyword t.Pos (e.Line) e.Lines>;

  t.Pos (s.Digit e.Line) e.Lines,
      <Type s.Digit>: 'D0' s.Digit =
    <DoScan-Number t.Pos (s.Digit) (e.Line) e.Lines>;

  t.Pos (s.Var '.' e.Line) e.Lines,
      <IsVarType s.Var>: True =
    <DoScan-Var t.Pos (s.Var '.') (e.Line) e.Lines>;

  t.Pos ('/*' e.Line) e.Lines =
    <DoScan-CComment t.Pos ('/*') (e.Line) e.Lines>;

  (s.Line 1 e.FileName) ('*$' e.Line) e.Lines =
    (TkSpecComment (s.Line 1 e.FileName) '*$' e.Line)
    <DoScan (<Inc s.Line> 1 e.FileName) e.Lines>;

  (s.Line 1 e.FileName) ('*' e.Comment) e.Lines
    = <DoScan (<Inc s.Line> 1 e.FileName) e.Lines>;

  t.Pos (s.StartIdent e.Line) e.Lines,
      <Type s.StartIdent>: 'L' s.Case s.StartIdent =
    <DoScan-Ident t.Pos (s.StartIdent) (e.Line) e.Lines>;

  t.Pos (s.Punctuation e.Line) e.Lines,
      <IsPunctuation s.Punctuation>: s.TokType =
    (s.TokType t.Pos)
    <DoScan <IncCol t.Pos> (e.Line) e.Lines>;

  t.Pos ('<' s.StartIdent e.Line) e.Lines,
      <Type s.StartIdent>: 'L' s.Case s.StartIdent =
    <DoScan-Ident t.Pos ('<' s.StartIdent) (e.Line) e.Lines>;

  t.Pos ('<' s.Arithm e.Line) e.Lines,
      '+-*/%?': e.Arithms-B s.Arithm e.Arithms-E =
    (TkOpenCall t.Pos s.Arithm)
    <DoScan <IncCol t.Pos Len '<' s.Arithm> (e.Line) e.Lines>;

  t.Pos ('<' e.Line) e.Lines =
    (TkError t.Pos 'Identifier expected after \'<\'')
    <DoScan <IncCol t.Pos> (e.Line) e.Lines>;

  t.Pos ('\'' e.Line) e.Lines =
    <DoScan-Chars <IncCol t.Pos> (e.Line) e.Lines>;

  t.Pos ('\"' e.Line) e.Lines =
    <DoScan-Compound t.Pos <IncCol t.Pos> () (e.Line) e.Lines>;

  t.Pos (s.Other e.Line) e.Lines =
    (TkError t.Pos 'Bad character \'' s.Other '\'')
    <DoScan <IncCol t.Pos> (e.Line) e.Lines>;
}

IsVarType {
  's' = True; 't' = True; 'e' = True; s.Other = False;
}

IsPunctuation {
  s.Punct,
      ('(' TkOpenBracket) (')' TkCloseBracket)
      ('{' TkOpenBlock) ('}' TkCloseBlock)
      ('>' TkCloseCall)
      (',' TkComma) (':' TkColon) ('=' TkAssign) (';' TkSemicolon):
        e.Types-B (s.Punct s.TokType) e.Types-E =
    s.TokType;

  s.Other = /* пусто */;
}

DoScan-Keyword {
  t.Pos (e.Line) e.Lines
    = <DoScan-BuildKeyword t.Pos ('$') (e.Line) e.Lines>;
}

DoScan-BuildKeyword {
  t.Pos (e.KeywordChars) (s.Next e.Line) e.Lines
    , <Type s.Next>: 'L' s.SubType s.Next
    = <DoScan-BuildKeyword
        t.Pos (e.KeywordChars s.Next) (e.Line) e.Lines
      >;

  t.Pos (e.KeywordChars) (e.Line) e.Lines
    , (TkExtern '$EXTERN') (TkExtern '$EXTRN') (TkExtern '$EXTERNAL')
      (TkEntry '$ENTRY')
    : e.Keywords-B (s.Tag e.KeywordChars) e.Keywords-E
    = (s.Tag t.Pos)
      <DoScan <IncCol t.Pos Len e.KeywordChars> (e.Line) e.Lines>;

  t.Pos (e.KeywordChars) (e.Line) e.Lines =
    (TkError t.Pos 'Bad keyword \'' e.KeywordChars '\'')
    <DoScan <IncCol t.Pos Len e.KeywordChars> (e.Line) e.Lines>;
}

DoScan-Number {
  t.Pos (e.Number) (s.Next e.Line) e.Lines,
      <Type s.Next>: 'D0' s.Next,
      <Numb e.Number s.Next>:
    {
      s.Macrodigit =
        <DoScan-Number
          t.Pos (e.Number s.Next) (e.Line) e.Lines
        >;

      e.MacrodigitChain =
        (TkError t.Pos 'Very big numeric literal: ' e.Number s.Next)
        <DoScan
          <IncCol t.Pos Len e.Number s.Next> (e.Line) e.Lines
        >;
    };

  t.Pos (e.Number) (e.Line) e.Lines =
    (TkMacroDigit t.Pos <Numb e.Number>)
    <DoScan
      <IncCol t.Pos Len e.Number> (e.Line) e.Lines
    >;
}

DoScan-Var {
  t.Pos (e.Variable) (s.Next e.Line) e.Lines,
      <IsIdentTail s.Next>: True =
    <DoScan-Var
      t.Pos (e.Variable s.Next) (e.Line) e.Lines
    >;

  t.Pos (s.Type '.' e.Index) (e.Line) e.Lines =
    (TkVariable t.Pos s.Type e.Index)
    <CheckIndex t.Pos e.Index>
    <DoScan
      <IncCol t.Pos Len s.Type '.' e.Index> (e.Line) e.Lines
    >;
}

IsIdentTail {
  '-' = True;
  '_' = True;

  s.Other, <Type s.Other>:
    {
      'D0' s.Other = True;
      'L' s.Case s.Other = True;

      e.OtherType = False;
    }
}

CheckIndex {
  t.Pos s.Digit e.MustBeDigits, <Type s.Digit> : 'D0' s.Digit_
    = <CheckIndex-Digits t.Pos e.MustBeDigits>;

  t.Pos s.Letter e.Any, <Type s.Letter> : 'L' s.st s.Letter_ = /* нет ошибок */;

  t.Pos s.Other e.Any
    = (TkError t.Pos 'index must start with a letter or a number');

  t.Pos /* пусто */ = (TkError t.Pos 'empty variable index');
}

CheckIndex-Digits {
  t.Pos /* пусто */ = /* нет ошибок */;

  t.Pos s.Digit e.MustBeDigits, <Type s.Digit> : 'D0' s.Digit_
    = <CheckIndex-Digits t.Pos e.MustBeDigits>;

  t.Pos s.Unexpected e.Tail = (TkError t.Pos 'index must be whole number');
}

DoScan-CComment {
  t.Pos (e.Comment) ('*/' e.Line) e.Lines =
    <DoScan <IncCol t.Pos Len e.Comment '*/'> (e.Line) e.Lines>;

  t.Pos (e.Comment) (s.Char e.Line) e.Lines =
    <DoScan-CComment t.Pos (e.Comment s.Char) (e.Line) e.Lines>;

  t.Pos (e.Comment) () e.Lines =
    <DoScan-CComment <IncLine t.Pos> () e.Lines>;

  t.Pos (e.Comment) /* пусто */ =
    (TkError t.Pos 'Unexpected EOF, unclosed comment')
    (TkEOF <IncCol t.Pos Len e.Comment>);
}

DoScan-Ident {
  t.Pos (e.Ident) (s.Next e.Line) e.Lines,
      <IsIdentTail s.Next>: True =
    <DoScan-Ident t.Pos (e.Ident s.Next) (e.Line) e.Lines>;

  t.Pos ('<' e.Ident) (e.Line) e.Lines =
    (TkOpenCall t.Pos e.Ident)
    <DoScan <IncCol t.Pos Len '<' e.Ident> (e.Line) e.Lines>;

  t.Pos (e.Ident) (e.Line) e.Lines =
    (TkName t.Pos e.Ident)
    <DoScan <IncCol t.Pos Len e.Ident> (e.Line) e.Lines>;
}

DoScan-Chars {
  t.Pos ('\\' e.Line) e.Lines =
    <DoScan-Chars-Escape t.Pos (e.Line) e.Lines>;

  t.Pos ('\'' e.Line) e.Lines =
    <DoScan <IncCol t.Pos> (e.Line) e.Lines>;

  t.Pos (s.Char e.Line) e.Lines =
    (TkChar t.Pos s.Char)
    <DoScan-Chars <IncCol t.Pos> (e.Line) e.Lines>;

  t.Pos () e.Lines =
    (TkError t.Pos 'Unclosed \' - single quote')
    <DoScan <IncLine t.Pos> e.Lines>;
}

SimpleEscapedChar {
  s.Escaped
    , ('\'\'') ('\"\"') ('\\\\') ('n\n') ('r\r') ('t\t')
      ('<<') ('>>') ('((') ('))')
    : {
        e.Escapes-B (s.Escaped s.Char) e.Escapes-E = s.Char;

        e.Escapes = /* пусто */;
      }
}

DoScan-Chars-Escape {
  t.Pos (s.Escaped e.Line) e.Lines,
      <SimpleEscapedChar s.Escaped>: s.Char =
    (TkChar t.Pos s.Char)
    <DoScan-Chars <IncCol t.Pos Len '\\' s.Escaped> (e.Line) e.Lines>;

  t.Pos ('x' s.Hex1 s.Hex2 e.Line) e.Lines,
      <HexDigit s.Hex1>: s.Num1,
      <HexDigit s.Hex2>: s.Num2 =
    (TkChar t.Pos <Chr <+ <* s.Num1 16> s.Num2>>)
    <DoScan-Chars <IncCol t.Pos Len '\\x' s.Hex1 s.Hex2> (e.Line) e.Lines>;

  t.Pos ('x' e.Line) e.Lines =
    (TkError t.Pos 'After \\x must be two hex digits')
    <DoScan-Chars <IncCol t.Pos Len '\\x'> (e.Line) e.Lines>;


  t.Pos (s.Other e.Line) e.Lines =
    (TkError t.Pos 'Bad escape sequence \\' s.Other)
    <DoScan-Chars <IncCol t.Pos Len '\\' s.Other> (e.Line) e.Lines>;

  t.Pos () e.Lines =
    (TkError t.Pos 'Unexpected \\ at end of string literal')
    <DoScan <IncLine t.Pos> e.Lines>;
}

HexDigit {
  s.Digit, <Type s.Digit>:
    {
      'D0' s.Digit = <Numb s.Digit>;
      'Lu' s.Digit = <DoHexDigit 'ABCDEF' 10 s.Digit>;
      'Ll' s.Digit = <DoHexDigit 'abcdef' 10 s.Digit>;

      s.Other = /* пусто */;
    };
}

DoHexDigit {
  s.Digit e.Samples s.Val s.Digit = s.Val;

  s.OtherDigit e.Samples s.Val s.Digit =
    <DoHexDigit e.Samples <Inc s.Val> s.Digit>;

  /* нет образцов */ s.BadVal s.Digit = /* пусто */;
}

DoScan-Compound {
  t.StartPos t.Pos (e.Compound) ('\"' e.Line) e.Lines =
    (TkCompound t.StartPos e.Compound)
    <DoScan <IncCol t.Pos> (e.Line) e.Lines>;

  t.StartPos t.Pos (e.Compound) ('\\' e.Line) e.Lines =
    <DoScan-Compound-HandleEscape
      t.StartPos <IncCol t.Pos> (e.Compound) (e.Line) e.Lines
    >;

  t.StartPos t.Pos (e.Compound) (s.Char e.Line) e.Lines =
    <DoScan-Compound t.StartPos <IncCol t.Pos> (e.Compound s.Char) (e.Line) e.Lines>;

  t.StartPos t.Pos (e.Compound) () e.Lines =
    (TkError t.Pos 'Unclosed \" - double quote')
    <DoScan <IncLine t.Pos> e.Lines>;
}

DoScan-Compound-HandleEscape {
  t.StartPos t.Pos (e.Compound) (s.Escaped e.Line) e.Lines,
      <SimpleEscapedChar s.Escaped>: s.Char =
    <DoScan-Compound t.StartPos <IncCol t.Pos> (e.Compound s.Char) (e.Line) e.Lines>;

  t.StartPos t.Pos (e.Compound) ('x' s.Hex1 s.Hex2 e.Line) e.Lines,
      <HexDigit s.Hex1>: s.Num1,
      <HexDigit s.Hex2>: s.Num2 =
    <DoScan-Compound
      t.StartPos <IncCol t.Pos Len 'x' s.Hex1 s.Hex2>
      (e.Compound <Chr <+ <* s.Num1 16> s.Num2>>) (e.Line) e.Lines
    >;

  t.StartPos t.Pos (e.Compound) ('x' e.Line) e.Lines =
    (TkError t.Pos 'After \\x must be two hex digits')
    <DoScan-Compound t.StartPos <IncCol t.Pos> (e.Compound) (e.Line) e.Lines>;

  t.StartPos t.Pos (e.Compound) (s.Other e.Line) e.Lines =
    (TkError t.Pos 'Bad escape sequence \\' s.Other)
    <DoScan-Compound t.StartPos <IncCol t.Pos> (e.Compound) (e.Line) e.Lines>;

  t.StartPos t.Pos (e.Compound) () e.Lines =
    (TkError t.Pos 'Unexpected \\ at end of compound literal')
    (TkCompound t.StartPos e.Compound)
    <DoScan <IncLine t.Pos> e.Lines>;
}


/**
  <Parse e.Tokens>
    == Success e.Refal5-AST
    == Fails t.Error*

  t.Error ::= (t.SrcPos e.Message)
*/
$ENTRY Parse {
  e.Tokens
    , e.Tokens : (s.1 t.Pos e.2) e.3
    , <Program () e.Tokens ()> : (Program e.Units) (TkEOF t.4) (e.Errors)
    = <Semantics t.Pos e.Units e.Errors>;
}

/*
  Program = empty | Program Unit.

  <Program (e.Tree) e.Tokens (e.Errors)>
    == (Program t.Unit*) e.Tokens (e.Errors)

  e.Errors ::= (Error t.Pos e.Message)*
*/
Program {
  () e.Tokens (e.Errors)
    = <Program ((Program /* пусто */)) e.Tokens (e.Errors)>;

  ((Program e.Units)) (Unit t.Unit) e.Tokens (e.Errors)
    = <Program ((Program e.Units t.Unit)) e.Tokens (e.Errors)>;

  ((Program e.Units)) (s.Type t.Pos e.Value) e.Tokens (e.Errors)
    , <StartOfUnit> : e.1 s.Type e.2
    = <Program
        ((Program e.Units))
        <Unit () (s.Type t.Pos e.Value) e.Tokens (e.Errors)>
      >;

  ((Program e.Units)) (TkSemicolon t.Pos) e.Tokens (e.Errors)
    = <Program ((Program e.Units)) e.Tokens (e.Errors)>;

  ((Program e.Units)) (TkEOF t.Pos) (e.Errors)
    = (Program e.Units) (TkEOF t.Pos) (e.Errors);

  ((Program e.Units)) t.Unexpected e.Tokens (e.Errors)
    = <Program
        ((Program e.Units)) e.Tokens
        (
          e.Errors
          <UnexpectedToken
            t.Unexpected '$EXTERN, $ENTRY, function name or special comment'
          >
        )
      >
}

StartOfUnit {
  = TkSpecComment TkExtern TkEntry TkName TkSemicolon
}

/*
  Unit = SPECIAL-COMMENT | "$EXTERN" NameList ";" | Function | ";".

  <Unit (e.Tree) e.Tokens (e.Errors)> == (Unit t.Unit)? e.Tokens (e.Errors)
*/
Unit {
  () (TkSpecComment t.Pos e.Text) e.Tokens (e.Errors)
    = (Unit (SpecialComment t.Pos e.Text)) e.Tokens (e.Errors);

  () (TkExtern t.Pos) e.Tokens (e.Errors)
    = <Unit (Extern) <NameList () e.Tokens (e.Errors)>>;

  (Extern) (NameList e.Names) e.Tokens (e.Errors)
    = <Unit (Extern (NameList e.Names)) e.Tokens (e.Errors)>;

  (Extern) (TkSemicolon t.Pos) e.Tokens (e.Errors)
    = e.Tokens
      (e.Errors (Error t.Pos 'No names after $EXTERN'));

  (Extern) t.Unexpected e.Tokens (e.Errors)
    , t.Unexpected : (s.1 t.Pos e.2)
    = t.Unexpected e.Tokens
      (e.Errors (Error t.Pos 'Can\'t parse names after $EXTERN'));

  (Extern (NameList e.Names)) (TkSemicolon t.Pos) e.Tokens (e.Errors)
    = (Unit (Extern e.Names)) e.Tokens (e.Errors);

  (Extern (NameList e.Names)) t.NextToken e.Tokens (e.Errors)
    , t.NextToken : (s.1 t.Pos e.2)
    = (Unit (Extern e.Names)) t.NextToken e.Tokens
      (e.Errors (Error t.Pos 'missed semicolon'));

  () (Function e.Function) e.Tokens (e.Errors)
    = (Unit (Function e.Function)) e.Tokens (e.Errors);

  () (s.Type t.Pos e.Value) e.Tokens (e.Errors)
    , TkName TkEntry : e.1 s.Type e.2
    = <Unit () <ParseFunction () (s.Type t.Pos e.Value) e.Tokens (e.Errors)>>;

  () (TkSemicolon t.Pos) e.Tokens (e.Errors) = e.Tokens (e.Errors);
}

*$ENUM Error

/*
  NameList = NAME | NameList "," NAME.

  <NameList (e.Tree) e.Tokens (e.Errors)>
    == (NameList e.Names)? e.Tokens (e.Errors)

  e.Names ::= (t.Pos e.Name)*
*/
NameList {
  () (TkName t.Pos e.Name) e.Tokens (e.Errors)
    = <NameList ((NameList (t.Pos e.Name))) e.Tokens (e.Errors)>;

  () t.Unexpected e.Tokens (e.Errors)
    , t.Unexpected : (s.1 t.Pos e.2)
    = t.Unexpected e.Tokens
      (e.Errors (Error t.Pos 'expected function name after $EXTERN keyword'));

  ((NameList e.Names)) (TkComma t.1) (TkName t.Pos e.Name) e.Tokens (e.Errors)
    = <NameList ((NameList e.Names (t.Pos e.Name))) e.Tokens (e.Errors)>;

  ((NameList e.Names)) (TkComma t.Pos) e.Tokens (e.Errors)
    = <NameList
        ((NameList e.Names)) e.Tokens
        (e.Errors (Error t.Pos 'expected name after comma'))
      >;

  ((NameList e.Names))
  (TkName t.NamePos e.Name) (TkOpenBlock t.BracketPos) e.Tokens
  (e.Errors)
    = (NameList e.Names)
      (TkName t.NamePos e.Name) (TkOpenBlock t.BracketPos) e.Tokens
      (
        e.Errors
        (Error t.NamePos 'missed semicolon after previous $EXTERN declaration')
      );

  ((NameList e.Names)) (TkName t.Pos e.Name) e.Tokens (e.Errors)
    = <NameList
        ((NameList e.Names (t.Pos e.Name))) e.Tokens
        (e.Errors (Error t.Pos 'missed comma after external name'))
      >;

  ((NameList e.Names)) e.Tokens (e.Errors)
    = (NameList e.Names) e.Tokens (e.Errors);
}

/*
  Function = ["$ENTRY"] NAME Block.

  <ParseFunction (e.Tree) e.Tokens (e.Errors)>
    == t.Function e.Tokens (e.Errors)

  <ParseFunction-Old e.Tokens> == (e.Errors t.FunctionUnit) e.Tokens
*/
ParseFunction {
  () e.Tokens (e.Errors)
    , <ParseFunction-Old e.Tokens> : (e.ParseErrors t.Function) e.TokensTail
    = t.Function e.TokensTail (e.Errors e.ParseErrors);
}

ParseFunction-Old {
  (TkEntry t.EntryPos) (TkName t.NamePos e.Name) e.Tokens =
    <Function-AfterBlock
      t.EntryPos (e.Name) Entry <Block e.Tokens>
    >;

  (TkName t.Pos e.Name) e.Tokens =
    <Function-AfterBlock
      t.Pos (e.Name) Local <Block e.Tokens>
    >;

  (TkEntry t.Pos) e.Tokens =
    (
      (Error t.Pos '$ENTRY without function name, skipped')
      (Function t.Pos (/* пусто */) Entry /* пусто */)
    )
    e.Tokens;
}

Function-AfterBlock {
  t.Pos (e.Name) s.Scope (e.Errors) (e.Sentences) e.Tokens =
    (
      e.Errors
      <CheckBuiltinRedefine t.Pos e.Name>
      (Function t.Pos (e.Name) s.Scope e.Sentences)
    )
    e.Tokens;
}

CheckBuiltinRedefine {
  t.Pos e.Name
    , <Builtins>
    : {
        e.Names-B (e.Name) e.Names-E
          = (Error t.Pos 'Redefinition of builtin function ' e.Name);

        e.Names = /* пусто */;
    }
}


/*
  Block = "{" Sentence { ";" Sentence } [";"] "}".

  <Block e.Tokens> == (e.Errors) (e.Sentences) e.Tokens
*/
Block {
  (TkOpenBlock t.Pos) e.Tokens =
    <Block-AfterSentence
      (/* errors */) (/* sentences */)
      <Sentence e.Tokens>
    >;

  t.Unexpected e.Tokens =
    (<UnexpectedToken t.Unexpected '\'{\''>)
    (/* no sentences */)
    t.Unexpected e.Tokens;
}

Block-AfterSentence {
  (e.Errors) (e.Sentences)
  (e.SentenceErrors) t.NextSentence
  t.Token1 t.Token2 e.Tokens,
      t.Token1 t.Token2:
    {
      (TkSemicolon t.Pos1) (TkCloseBlock t.Pos2) =
        <CheckEmptyBlock
          (e.Errors e.SentenceErrors)
          (e.Sentences t.NextSentence)
          t.Pos1 e.Tokens
        >;

      (TkCloseBlock t.Pos) t.Token2 =
        <CheckEmptyBlock
          (e.Errors e.SentenceErrors)
          (e.Sentences t.NextSentence)
          t.Pos t.Token2 e.Tokens
        >;

      (TkSemicolon t.Pos) t.Token2 =
        <Block-AfterSentence
          (e.Errors e.SentenceErrors)
          (e.Sentences t.NextSentence)
          <Sentence t.Token2 e.Tokens>
        >;

      t.Token1 t.Token2 =
        <Block-AfterSentence
          (
            e.Errors e.SentenceErrors
            <UnexpectedToken t.Token1 '\';\' or \'}\', skipped'>
          )
          (e.Sentences t.NextSentence)
          <Sentence t.Token2 e.Tokens>
        >
    };

  (e.Errors) (e.Sentences)
  (e.SentenceErrors) t.NextSentence
  (TkEOF t.Pos) =
    <CheckEmptyBlock
      (
        e.Errors e.SentenceErrors
        <UnexpectedToken (TkEOF t.Pos) '\';\' or \'}\''>
      )
      (e.Sentences t.NextSentence)
      t.Pos (TkEOF t.Pos)
    >;
}

CheckEmptyBlock {
  (e.Errors) (/* no sentences */) t.Pos e.Tokens =
    (e.Errors (Error t.Pos 'Empty function block'))
    (/* no sentences */) e.Tokens;

  (e.Errors) (e.Sentences) t.Pos e.Tokens =
    (e.Errors) (e.Sentences) e.Tokens;
}


/*
  Sentence = Pattern ("=" Result | "," ExtensionChain).

  <Sentence e.Tokens> == (e.Errors) t.Sentence e.Tokens
*/
Sentence {
  e.Tokens =
    <Sentence-AfterPattern <Pattern e.Tokens>>;
}

Sentence-AfterPattern {
  (e.Errors) t.Pattern (TkAssign t.Pos) e.Tokens =
    <Sentence-AfterResult
      (e.Errors) t.Pattern <Result e.Tokens>
    >;

  (e.Errors) t.Pattern (TkComma t.Pos) e.Tokens =
    <Sentence-AfterExtensionChain
      (e.Errors) t.Pattern <ExtensionChain e.Tokens>
    >;

  (e.Errors) t.Pattern (TkSemicolon t.Pos) e.Tokens =
    <Sentence-AfterResult
      (e.Errors (Error t.Pos 'Missed \'=\'')) t.Pattern
      <Result (TkSemicolon t.Pos) e.Tokens>
    >;

  (e.Errors) t.Pattern (TkColon t.Pos) e.Tokens =
    <Sentence-AfterExtensionChain
      (e.Errors (Error t.Pos 'Missed \',\'')) t.Pattern
      <ExtensionChain (TkColon t.Pos) e.Tokens>
    >;

  (e.Errors) t.Pattern t.Unexpected e.Tokens =
    (e.Errors <UnexpectedTokenInSentence t.Unexpected>)
    (t.Pattern RETURN (/* пустой результат */))
    t.Unexpected e.Tokens;
}

UnexpectedTokenInSentence {
  t.Unexpected =
    <UnexpectedToken
      t.Unexpected 'valid Refal expression, \'=\', \',\', \':\' or \';\''
    >
}

Sentence-AfterResult {
  (e.Errors) t.Pattern (e.ResultErrors) t.Result e.Tokens =
    (e.Errors e.ResultErrors)
    (t.Pattern RETURN t.Result)
    e.Tokens
}

Sentence-AfterExtensionChain {
  (e.Errors) t.Pattern (e.ExtensionErrors) (e.Conditions-And-SentenceTail)
  e.Tokens =
    (e.Errors e.ExtensionErrors)
    (t.Pattern e.Conditions-And-SentenceTail)
    e.Tokens;
}


/*
  ExtensionChain =
    Result ":" (Block | Pattern ("," ExtensionChain | "=" Result)).

  <ExtensionChain e.Tokens>
    == (e.Errors) (e.Conditions-And-SentenceTail) e.Tokens
*/
ExtensionChain {
  e.Tokens =
    <ExtensionChain-AfterResult <Result e.Tokens>>;
}

ExtensionChain-AfterResult {
  (e.Errors) t.Result (TkColon t.ColonPos) (TkOpenBlock t.BlockPos) e.Tokens =
    <ExtensionChain-AfterBlock
      (e.Errors) t.Result <Block (TkOpenBlock t.BlockPos) e.Tokens>
    >;

  (e.Errors) t.Result t.NextToken e.Tokens,
      t.NextToken:
    {
      (TkColon t.Pos) =
        <ExtensionChain-AfterPattern
          (e.Errors) t.Result <Pattern e.Tokens>
        >;

      (TkOpenBlock t.Pos) =
        <ExtensionChain-AfterBlock
          (e.Errors (Error t.Pos 'Missed \':\' before block')) t.Result
          <Block (TkOpenBlock t.Pos) e.Tokens>
        >;

      (TkSemicolon t.Pos) =
        (e.Errors (Error t.Pos 'Mistaken \',\' for \'=\''))
        (RETURN t.Result)
        (TkSemicolon t.Pos) e.Tokens;

      (s.Type t.Pos),
          <OneOf s.Type TkComma TkAssign>: True =
        <ExtensionChain-AfterPattern
          (e.Errors (Error t.Pos 'Missed \':\'')) t.Result
          <Pattern (TkComma t.Pos) e.Tokens>
        >;

      t.Unexpected =
        (e.Errors <UnexpectedTokenInSentence t.Unexpected>)
        (RETURN t.Result) t.Unexpected e.Tokens
    }
}

ExtensionChain-AfterBlock {
  (e.Errors) t.Result (e.BlockErrors) (e.Sentences) e.Tokens =
    (e.Errors e.BlockErrors)
    (CALL-BLOCK t.Result e.Sentences)
    e.Tokens;
}

ExtensionChain-AfterPattern {
  (e.Errors) t.Result (e.PatternErrors) t.Pattern t.NextToken e.Tokens,
      t.NextToken:
    {
      (TkComma t.Pos) =
        <ExtensionChain-AfterExtensionChain
          (e.Errors e.PatternErrors) t.Result t.Pattern
          <ExtensionChain e.Tokens>
        >;

      (TkAssign t.Pos) =
        <ExtensionChain-AfterPattern-AfterResult
          (e.Errors e.PatternErrors) t.Result t.Pattern
          <Result e.Tokens>
        >;

      (TkColon t.Pos) =
        <ExtensionChain-AfterExtensionChain
          (e.Errors e.PatternErrors (Error t.Pos 'Missed \',\''))
          t.Result t.Pattern
          <ExtensionChain t.NextToken e.Tokens>
        >;

      (TkSemicolon t.Pos) =
        <ExtensionChain-AfterPattern-AfterResult
          (e.Errors e.PatternErrors (Error t.Pos 'Missed \'=\''))
          t.Result t.Pattern
          <Result t.NextToken e.Tokens>
        >;

      t.Unexpected =
        (e.Errors e.PatternErrors <UnexpectedTokenInSentence t.Unexpected>)
        ((Condition t.Result t.Pattern) RETURN (/* пустой результат */))
        t.Unexpected e.Tokens;
    }
}

ExtensionChain-AfterExtensionChain {
  (e.Errors) t.Result t.Pattern
  (e.ChainErrors) (e.Conditions-And-SentenceTail) e.Tokens =
    (e.Errors e.ChainErrors)
    ((Condition t.Result t.Pattern) e.Conditions-And-SentenceTail)
    e.Tokens;
}

ExtensionChain-AfterPattern-AfterResult {
  (e.Errors) t.Result t.Pattern
  (e.ResultErrors) t.FinalResult e.Tokens =
    (e.Errors e.ResultErrors)
    ((Condition t.Result t.Pattern) RETURN t.FinalResult)
    e.Tokens;
}


/*
  Pattern = Expression.

  <Pattern e.Tokens> == (e.Errors) t.Pattern e.Tokens
*/
Pattern {
  e.Tokens = <Expression Pattern e.Tokens>;
}


/*
  Result = Expression.

  <Result e.Tokens> == (e.Errors) t.Result e.Tokens
*/
Result {
  e.Tokens = <Expression Result e.Tokens>;
}


/*
  Expression = (
      NAME
    | COMPOUND
    | NUMBER
    | CHAR
    | VARIABLE
    | "(" Expression ")"
    | "<Func" Expression ">" -- допустимо только в результатных выражениях
  )* !((")" | ">") Expression)*

  <Expression s.Kind e.Tokens> == (e.Errors) t.Expression e.Tokens

  s.Kind ::= Pattern | Result
*/
Expression {
  s.Kind e.Tokens =
    <Expression-CheckBrackets
      s.Kind <Expression-Aux s.Kind e.Tokens>
    >;
}

Expression-Aux {
  s.Kind e.Tokens =
    <DoExpression s.Kind (/* errors */) (/* collected */) e.Tokens>
}

DoExpression {
  s.Kind (e.Errors) (e.Collected) t.NextToken e.Tokens,
      t.NextToken:
    {
      (TkName t.Pos e.Name) =
        <DoExpression
          s.Kind (e.Errors) (e.Collected (Symbol Word e.Name)) e.Tokens
        >;

      (TkCompound t.Pos e.Symbols) =
        <DoExpression
          s.Kind (e.Errors) (e.Collected (Symbol Word e.Symbols)) e.Tokens
        >;

      (TkMacroDigit t.Pos s.Number) =
        <DoExpression
          s.Kind (e.Errors) (e.Collected (Symbol Number s.Number)) e.Tokens
        >;

      (TkChar t.Pos s.Char) =
        <DoExpression
          s.Kind (e.Errors) (e.Collected (Symbol Char s.Char)) e.Tokens
        >;

      (TkVariable t.Pos s.VarType e.Index) =
        <DoExpression
          s.Kind (e.Errors)
          (e.Collected (Variable t.Pos s.VarType e.Index)) e.Tokens
        >;

      (TkOpenBracket t.Pos) =
        <DoExpression-AfterBracket
          s.Kind (e.Errors) (e.Collected) <Expression-Aux s.Kind e.Tokens>
        >;

      (TkOpenCall t.Pos e.FuncName) =
        <DoExpression-AfterCall
          s.Kind (e.Errors) (e.Collected) t.Pos (e.FuncName)
          <Expression-Aux s.Kind e.Tokens>
        >;

      t.OtherToken =
        (e.Errors) (e.Collected) t.OtherToken e.Tokens;
    }
}

DoExpression-AfterBracket {
  s.Kind (e.Errors) (e.Collected)
  (e.SubexprErrors) (e.BracketTerms) (TkCloseBracket t.Pos) e.Tokens =
    <DoExpression
      s.Kind (e.Errors e.SubexprErrors)
      (e.Collected (Brackets e.BracketTerms)) e.Tokens
    >;

  s.Kind (e.Errors) (e.Collected)
  (e.SubexprErrors) (e.BracketTerms) (s.Type t.Pos e.Value) e.Tokens =
    <DoExpression
      s.Kind (e.Errors e.SubexprErrors (Error t.Pos 'Missed \')\''))
      (e.Collected (Brackets e.BracketTerms)) (s.Type t.Pos e.Value) e.Tokens
    >;
}

DoExpression-AfterCall {
  Result (e.Errors) (e.Collected) t.CallPos (e.FuncName)
  (e.SubexprErrors) (e.BracketTerms) (TkCloseCall t.Pos) e.Tokens =
    <DoExpression
      Result (e.Errors e.SubexprErrors)
      (e.Collected (Call t.CallPos (e.FuncName) e.BracketTerms)) e.Tokens
    >;

  Pattern (e.Errors) (e.Collected) t.CallPos (e.FuncName)
  (e.SubexprErrors) (e.BracketTerms) (TkCloseCall t.Pos) e.Tokens =
    <DoExpression
      Pattern
      (
        e.Errors e.SubexprErrors
        (Error
          t.CallPos
          'unexpected \'>\' in pattern expression, maybe missed \'=\''
        )
      )
      (e.Collected (Brackets e.BracketTerms)) e.Tokens
    >;

  Result (e.Errors) (e.Collected) t.CallPos (e.FuncName)
  (e.SubexprErrors) (e.BracketTerms) (s.Type t.Pos e.Value) e.Tokens =
    <DoExpression
      Result (e.Errors e.SubexprErrors (Error t.Pos 'Missed \'>\''))
      (e.Collected (Call t.CallPos (e.FuncName) e.BracketTerms))
      (s.Type t.Pos e.Value) e.Tokens
    >;

  Pattern (e.Errors) (e.Collected) t.CallPos (e.FuncName)
  (e.SubexprErrors) (e.BracketTerms) (s.Type t.Pos e.Value) e.Tokens =
    <DoExpression
      Pattern
      (
        e.Errors e.SubexprErrors
        (Error
          t.CallPos
          'unexpected \'>\' in pattern expression, maybe missed \'=\''
        )
        (Error t.Pos 'Missed \')\'')
      )
      (e.Collected (Brackets e.BracketTerms)) (s.Type t.Pos e.Value) e.Tokens
    >;
}

Expression-CheckBrackets {
  s.Kind (e.Errors) (e.Expression) (s.Type t.Pos) e.Tokens,
      <OneOf s.Type TkCloseBracket TkCloseCall>: True =
    <Expression-CheckBrackets-AfterSubexpr
      s.Kind
      (e.Errors (Error t.Pos 'unbalanced ' <TokName s.Type>))
      (e.Expression)
      <Expression-Aux s.Kind e.Tokens>
    >;

  s.Kind (e.Errors) t.Expression e.Tokens = (e.Errors) t.Expression e.Tokens;
}

Expression-CheckBrackets-AfterSubexpr {
  s.Kind (e.Errors) (e.Expression)
  (e.SubexprErrors) (e.Subexpression) e.Tokens =
    <Expression-CheckBrackets
      s.Kind (e.Errors e.SubexprErrors) (e.Expression e.Subexpression) e.Tokens
    >;
}


UnexpectedToken {
  (TkError t.Pos e.Message) e.Expected =
    (Error t.Pos e.Message);

  (s.Type t.Pos e.Value) e.Expected =
    (Error t.Pos 'unexpected ' <TokName s.Type> ', expected ' e.Expected);
}


/*
 <Semantics t.FirstTokenPos t.ErrorUnit*>
    == Success t.Unit*
    == Fails t.Error*
*/
Semantics {
  t.FirstTokenPos e.ErrorsUnits
      , <FilterUnitsAndFunctionNames e.ErrorsUnits>
      : e.Units (e.Functions) s.HasEntry
      , <FindSemanticsErrors (e.Functions) e.ErrorsUnits>
        <NoEntryError t.FirstTokenPos s.HasEntry>
      : {
          /* пусто */ = Success e.Units;

          e.Errors = Fails e.Errors;
        };
}

*$ENUM NoEntry, HasEntry

NoEntryError {
  t.Pos NoEntry = (t.Pos 'No $ENTRY functions in a file');
  t.Pos HasEntry = /* пусто */;
}

FilterUnitsAndFunctionNames {
  e.ErrorsUnits =
    <DoFilterUnitsAndFunctionNames
      NoEntry e.ErrorsUnits (<Builtins>)
    >;
}

DoFilterUnitsAndFunctionNames {
  s.HasEntry (Error t.Pos e.Message) e.ErrorsUnits (e.Names) =
    <DoFilterUnitsAndFunctionNames s.HasEntry e.ErrorsUnits (e.Names)>;

  s.HasEntry (SpecialComment t.Pos e.Text) e.ErrorsUnits (e.Names) =
    (SpecialComment t.Pos e.Text)
    <DoFilterUnitsAndFunctionNames s.HasEntry e.ErrorsUnits (e.Names)>;

  s.HasEntry
  (Function t.Pos (e.Name) s.Scope e.Sentences) e.ErrorsUnits (e.Names) =
    (Function t.Pos (e.Name) s.Scope e.Sentences)
    <DoFilterUnitsAndFunctionNames
      <UpdateHasEntry s.HasEntry s.Scope>
      e.ErrorsUnits (e.Names (e.Name))
    >;

  s.HasEntry (Extern e.ExternalNames) e.ErrorsUnits (e.Names) =
    (Extern e.ExternalNames)
    <DoFilterUnitsAndFunctionNames
      s.HasEntry e.ErrorsUnits (e.Names <Map refal5-parser_RemovePos e.ExternalNames>)
    >;

  s.HasEntry /* кончились юниты и ошибки */ (e.Names) = (e.Names) s.HasEntry;
}

UpdateHasEntry {
  HasEntry s.Scope = HasEntry;
  s.HasEntry Entry = HasEntry;
  s.HasEntry Local = s.HasEntry;
}

$ENTRY refal5-parser_RemovePos { (t.Pos e.Name) = (e.Name) }

FindSemanticsErrors {
  (e.FuncNames) e.ErrorsUnits
    = <Map (refal5-parser_FindSemanticsErrors e.FuncNames) e.ErrorsUnits>
      <FindRedefinitions e.ErrorsUnits>;
}

FindRedefinitions {
  e.ErrorsUnits-B
  (Function t.Pos1 (e.Name) s.Scope1 e.Sentences1)
  e.ErrorsUnits-E
  (Function t.Pos2 (e.Name) s.Scope2 e.Sentences2)
    = <FindRedefinitions
        e.ErrorsUnits-B
        (Function t.Pos1 (e.Name) s.Scope1 e.Sentences1)
        e.ErrorsUnits-E
      >
      (t.Pos2 'Function ' e.Name ' is redefined');

  e.ErrorsUnits t.Other = <FindRedefinitions e.ErrorsUnits>;

  /* пусто */ = /* пусто */;
}

$ENTRY refal5-parser_FindSemanticsErrors {
  e.FuncNames (Error t.Pos e.Message) = (t.Pos e.Message);

  e.FuncNames (SpecialComment t.Pos e.Text) = /* пусто */;

  e.FuncNames (Function t.Pos (e.Name) s.Scope e.Sentences) =
    <CheckSentences (e.FuncNames) (/* variables */) e.Sentences>;

  e.FuncNames (Extern e.Names) = /* пусто */;
}

CheckSentences {
  (e.FuncNames) (e.Variables) (e.Sentence) e.Sentences =
    <CheckSentence
      (e.FuncNames) (e.Variables) <ExtractCheckable e.Sentence>
    >
    <CheckSentences (e.FuncNames) (e.Variables) e.Sentences>;

  (e.FuncNames) (e.Variables) /* всё */ = /* всё */;
}

ExtractCheckable {
  (e.Pattern) e.Conditions-And-SentenceTail =
    (<ExtractCheckable-Expr e.Pattern>)
    <ExtractCheckable-Tail e.Conditions-And-SentenceTail>;
}

ExtractCheckable-Tail {
  (Condition (e.Result) (e.Pattern)) e.Tail =
    (Condition
      (<ExtractCheckable-Expr e.Result>) (<ExtractCheckable-Expr e.Pattern>)
    )
    <ExtractCheckable-Tail e.Tail>;

  RETURN (e.Result) = RETURN (<ExtractCheckable-Expr e.Result>);

  CALL-BLOCK (e.Result) e.Sentences =
    CALL-BLOCK (<ExtractCheckable-Expr e.Result>)
    <ExtractCheckable-Sentences e.Sentences>;
}

ExtractCheckable-Sentences {
  (e.Sentence) e.Sentences =
    (<ExtractCheckable e.Sentence>) <ExtractCheckable-Sentences e.Sentences>;

  /* пусто */ = /* пусто */;
}

ExtractCheckable-Expr {
  t.Term e.Expr =
    <ExtractCheckable-Term t.Term> <ExtractCheckable-Expr e.Expr>;

  /* пусто */ = /* пусто */;
}

ExtractCheckable-Term {
  (Variable t.SrcPos s.VarType e.Index) = (Variable t.SrcPos s.VarType e.Index);

  (Brackets e.Expr) = <ExtractCheckable-Expr e.Expr>;

  (Call t.Pos (e.Name) e.Expr) =
    (Call t.Pos e.Name) <ExtractCheckable-Expr e.Expr>;

  /* CheckSentences может повторно вызываться к своему результату */
  (Call t.Pos e.Name) = (Call t.Pos e.Name);

  t.OtherTerm = /* здесь нет переменных */;
}

CheckSentence {
  (e.FuncNames) (e.Variables) (e.PatternItems) e.Tail =
    <CheckSentence-Tail
      (e.FuncNames) (e.Variables e.PatternItems) e.Tail
    >;
}

CheckSentence-Tail {
  (e.FuncNames) (e.Variables) (Condition (e.ResultItems) (e.PatternItems)) e.Tail =
    <CheckResult (e.FuncNames) (e.Variables) e.ResultItems>
    <CheckSentence-Tail (e.FuncNames) (e.Variables e.PatternItems) e.Tail>;

  (e.FuncNames) (e.Variables) RETURN (e.ResultItems) =
    <CheckResult (e.FuncNames) (e.Variables) e.ResultItems>;

  (e.FuncNames) (e.Variables) CALL-BLOCK (e.ResultItems) e.Sentences =
    <CheckResult (e.FuncNames) (e.Variables) e.ResultItems>
    <CheckSentences (e.FuncNames) (e.Variables) e.Sentences>;
}

CheckResult {
  (e.FuncNames) (e.Variables) (Call t.Pos e.Name) e.Items,
      e.FuncNames:
    {
      e.Names-B (e.Name) e.Names-E =
        <CheckResult (e.FuncNames) (e.Variables) e.Items>;

      e.Names =
        (t.Pos 'function ' e.Name ' is not declared')
        <CheckResult (e.FuncNames) (e.Variables) e.Items>;
    };

  (e.FuncNames) (e.Variables) (Variable t.Pos s.Type e.Index) e.Items,
      e.Variables:
    {
      e.Vars-B (Variable t.DeclPos s.Type e.Index) e.Vars-E =
        <CheckResult (e.FuncNames) (e.Variables) e.Items>;

      e.Vars =
        (t.Pos 'variable ' s.Type '.' e.Index ' is not declared')
        <CheckResult (e.FuncNames) (e.Variables) e.Items>;
    };

  (e.FuncNames) (e.Variables) /* всё */ =
    /* всё */;
}
